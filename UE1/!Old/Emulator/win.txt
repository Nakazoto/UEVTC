Start by installing MSYS2 (https://www.msys2.org). This will give you a free
Unix-like command line and development system for Windows. Do the first 7 steps
of the installation shown there, then do the following command:

pacman -S mingw-w64-x86_64-pdcurses

which will install a usable curses library for Windows. This is the part that
makes dealing with Windows harder - curses is well integrated in to Linux and
Mac systems, but a very foreign concept to Windows.

After that, it's easy. The next thing to do will be to change directory to where
you saved ue14500.c. I'll assume you put it in c:\Users\usagi\Downloads. Change
directory:

cd /c/Users/usagi/Downloads

Compile the source:

gcc -o ue14500 ue14500.c -lpdcurses

Run the emulator:

./ue14500.exe

There are numerous other ways to accomplish this, but I hope this is the least
painful.

Here are a few specific areas of concern I have for you to check on:

- Verify boots up in the typical "random" state seen by the real machine.
- What is the behavior of the logic unit VFD with non-logic instructions?
- What is the behavior of the carry for instructions other than LD, ADD, ONE?
- Skip register behavior - what clears it?

There are probably more issues, and it will take a thorough run through of input
states and instructions, comparing the emulator with the hardware, to find them.
Good luck!

Ok, as to why I used the curses library... Curses is a library that abstracts
text user interfaces (TUIs) so they will theoretically work with any terminal
emulator (nowadays) or actual physical terminal (also still a little now, but
much more in earlier days).

This UE14500 emulator is pretty simple, and it would be really cool if it some
day ran on something like... a Centurion minicomputer. There are a lot of steps
before we could get to that, but it is theoretically possible.

In the meantime, a great crossover project (and I did think of this before your
recent TI video, but you said it out loud before I could) would be to take
something like a Raspberry Pi, hook it up to the Centurion's terminal, and run
this emulator on it. Curses supports the ADDS terminals which is what I
understand they actually are, so it should just work.

I purposely kept this emulator simple so that it can work on really old physical
terminals. I am considering making the interface a bit fancier since most of us
will be running it on terminal emulators which can do color, etc. But that will
be conditional, and the emulator will always be able to run on very basic old
real terminals.

Finally, some additional directions the emulator could go are:

- Write an assembler so we can write programs in assembly instead of machine
  code. This would fit in well once I see how you do the memory system. For now,
  I would consider the UE14500 to be a programmable computer. When the memory
  block comes in, it will be a stored-program computer, so an assembler becomes
  useful.

- Add a simple disassembly output to the emulator to show which instruction you
  currently have selected.

